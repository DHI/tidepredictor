[
  {
    "objectID": "api/LevelPredictor.html",
    "href": "api/LevelPredictor.html",
    "title": "LevelPredictor",
    "section": "",
    "text": "LevelPredictor(self, constituent_repo)\nPredict tidal levels timeseries (surface elevation)\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nconstituent_repo\nConstituentRepository\nRepository\nrequired\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\npredict\nPredict tide levels or currents using utide.\n\n\n\n\n\nLevelPredictor.predict(lon, lat, start, end, interval=timedelta(hours=1))\nPredict tide levels or currents using utide.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nlon\nfloat\nThe longitude.\nrequired\n\n\nlat\nfloat\nThe latitude.\nrequired\n\n\nstart\ndatetime\nThe start date.\nrequired\n\n\nend\ndatetime\nThe end date.\nrequired\n\n\ninterval\ntimedelta\nThe interval between predictions.\ntimedelta(hours=1)\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\npl.DataFrame\nThe predicted tide levels or currents.\n\n\n\n\n\n\nThe workhorse of this functions the reconstruct function from UTide"
  },
  {
    "objectID": "api/LevelPredictor.html#parameters",
    "href": "api/LevelPredictor.html#parameters",
    "title": "LevelPredictor",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nconstituent_repo\nConstituentRepository\nRepository\nrequired"
  },
  {
    "objectID": "api/LevelPredictor.html#methods",
    "href": "api/LevelPredictor.html#methods",
    "title": "LevelPredictor",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\npredict\nPredict tide levels or currents using utide.\n\n\n\n\n\nLevelPredictor.predict(lon, lat, start, end, interval=timedelta(hours=1))\nPredict tide levels or currents using utide.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nlon\nfloat\nThe longitude.\nrequired\n\n\nlat\nfloat\nThe latitude.\nrequired\n\n\nstart\ndatetime\nThe start date.\nrequired\n\n\nend\ndatetime\nThe end date.\nrequired\n\n\ninterval\ntimedelta\nThe interval between predictions.\ntimedelta(hours=1)\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\npl.DataFrame\nThe predicted tide levels or currents.\n\n\n\n\n\n\nThe workhorse of this functions the reconstruct function from UTide"
  },
  {
    "objectID": "api/NetCDFConstituentRepository.html",
    "href": "api/NetCDFConstituentRepository.html",
    "title": "NetCDFConstituentRepository",
    "section": "",
    "text": "NetCDFConstituentRepository(self, fp)\nA repository of tidal constituents stored in a NetCDF file.\n\n\n\n\n\nName\nDescription\n\n\n\n\nget_current_constituents\nGet the current constituents for a given longitude and latitude.\n\n\nget_level_constituents\nGet the level constituents for a given longitude and latitude.\n\n\n\n\n\nNetCDFConstituentRepository.get_current_constituents(lon, lat)\nGet the current constituents for a given longitude and latitude.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nlon\nfloat\nThe longitude.\nrequired\n\n\nlat\nfloat\nThe latitude.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\ndict[str, CurrentConstituent]\nThe current constituents.\n\n\n\n\n\n\n\nNetCDFConstituentRepository.get_level_constituents(lon, lat)\nGet the level constituents for a given longitude and latitude.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nlon\nfloat\nThe longitude.\nrequired\n\n\nlat\nfloat\nThe latitude.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\ndict[str, LevelConstituent]\nThe level constituents."
  },
  {
    "objectID": "api/NetCDFConstituentRepository.html#methods",
    "href": "api/NetCDFConstituentRepository.html#methods",
    "title": "NetCDFConstituentRepository",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nget_current_constituents\nGet the current constituents for a given longitude and latitude.\n\n\nget_level_constituents\nGet the level constituents for a given longitude and latitude.\n\n\n\n\n\nNetCDFConstituentRepository.get_current_constituents(lon, lat)\nGet the current constituents for a given longitude and latitude.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nlon\nfloat\nThe longitude.\nrequired\n\n\nlat\nfloat\nThe latitude.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\ndict[str, CurrentConstituent]\nThe current constituents.\n\n\n\n\n\n\n\nNetCDFConstituentRepository.get_level_constituents(lon, lat)\nGet the level constituents for a given longitude and latitude.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nlon\nfloat\nThe longitude.\nrequired\n\n\nlat\nfloat\nThe latitude.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\ndict[str, LevelConstituent]\nThe level constituents."
  },
  {
    "objectID": "api/get_default_constituent_path.html",
    "href": "api/get_default_constituent_path.html",
    "title": "get_default_constituent_path",
    "section": "",
    "text": "get_default_constituent_path(prediction_type)\nGet the default path to the constituent file.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nprediction_type\nPredictionType\nThe type of prediction.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nPath\nThe path to the constituent file."
  },
  {
    "objectID": "api/get_default_constituent_path.html#parameters",
    "href": "api/get_default_constituent_path.html#parameters",
    "title": "get_default_constituent_path",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nprediction_type\nPredictionType\nThe type of prediction.\nrequired"
  },
  {
    "objectID": "api/get_default_constituent_path.html#returns",
    "href": "api/get_default_constituent_path.html#returns",
    "title": "get_default_constituent_path",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\n\nPath\nThe path to the constituent file."
  },
  {
    "objectID": "getting-started.html",
    "href": "getting-started.html",
    "title": "Getting started",
    "section": "",
    "text": "Install the tidepredictor package from the distributed wheel file.\n\npip install tidepredictor-*.whl\n\nCopy constituent files (.nc files) to the ~/.local/share/tidepredictor directory."
  },
  {
    "objectID": "getting-started.html#installation",
    "href": "getting-started.html#installation",
    "title": "Getting started",
    "section": "",
    "text": "Install the tidepredictor package from the distributed wheel file.\n\npip install tidepredictor-*.whl\n\nCopy constituent files (.nc files) to the ~/.local/share/tidepredictor directory."
  },
  {
    "objectID": "getting-started.html#usage",
    "href": "getting-started.html#usage",
    "title": "Getting started",
    "section": "Usage",
    "text": "Usage\ntidepredictor can be used either as a command line tool or as a Python library.\n\nPython library\n\nimport tidepredictor as tp\nfrom datetime import datetime, timedelta\n\npath = tp.get_default_constituent_path(tp.PredictionType.level)\n\nrepo = tp.NetCDFConstituentRepository(path)\n\npredictor = tp.LevelPredictor(repo)\n\ndf = predictor.predict(\n    lon=-2.75,\n    lat=56.1,\n    start=datetime(2021, 1, 1),\n    end=datetime(2021, 1, 1, 12),\n    interval=timedelta(hours=1),\n)\ndf\n\n\nshape: (13, 2)\n\n\n\ntime\nlevel\n\n\ndatetime[ns]\nf64\n\n\n\n\n2021-01-01 00:00:00\n-0.442367\n\n\n2021-01-01 01:00:00\n0.497577\n\n\n2021-01-01 02:00:00\n1.276745\n\n\n2021-01-01 03:00:00\n1.72732\n\n\n2021-01-01 04:00:00\n1.745138\n\n\n…\n…\n\n\n2021-01-01 08:00:00\n-1.28875\n\n\n2021-01-01 09:00:00\n-1.764365\n\n\n2021-01-01 10:00:00\n-1.7304\n\n\n2021-01-01 11:00:00\n-1.206373\n\n\n2021-01-01 12:00:00\n-0.351576\n\n\n\n\n\n\nAnd similar for depth averaged currents.\n\npath = tp.get_default_constituent_path(tp.PredictionType.current)\n\nrepo = tp.NetCDFConstituentRepository(path)\n\npredictor = tp.CurrentPredictor(repo)\n\ndf = predictor.predict_depth_averaged(\n    lon=-2.75,\n    lat=56.1,\n    start=datetime(2021, 1, 1),\n    end=datetime(2021, 1, 1, 12),\n    interval=timedelta(hours=1)\n)\ndf\n\n\nshape: (13, 3)\n\n\n\ntime\nu\nv\n\n\ndatetime[ns]\nf64\nf64\n\n\n\n\n2021-01-01 00:00:00\n-0.306778\n-0.04915\n\n\n2021-01-01 01:00:00\n-0.266633\n-0.056529\n\n\n2021-01-01 02:00:00\n-0.172855\n-0.052108\n\n\n2021-01-01 03:00:00\n-0.043507\n-0.037106\n\n\n2021-01-01 04:00:00\n0.09946\n-0.013727\n\n\n…\n…\n…\n\n\n2021-01-01 08:00:00\n0.20092\n0.054071\n\n\n2021-01-01 09:00:00\n0.051412\n0.03789\n\n\n2021-01-01 10:00:00\n-0.106491\n0.011537\n\n\n2021-01-01 11:00:00\n-0.224378\n-0.016184\n\n\n2021-01-01 12:00:00\n-0.273847\n-0.037307\n\n\n\n\n\n\nAnd current profiles.\n\npath = tp.get_default_constituent_path(tp.PredictionType.current)\n\nrepo = tp.NetCDFConstituentRepository(path)\n\npredictor = tp.CurrentPredictor(repo)\n\ndf = predictor.predict_profile(\n    lon=-2.75,\n    lat=56.1,\n    start=datetime(2021, 1, 1),\n    end=datetime(2021, 1, 2, 1),\n    interval=timedelta(hours=1),\n    levels=[-1.0, -5.0, -15.0]\n)\ndf\n\n\nshape: (78, 7)\n\n\n\ntime\ndepth\nuavg\nu\nvavg\nv\ntotal_water_depth\n\n\ndatetime[ns]\nf64\nf64\nf64\nf64\nf64\nf64\n\n\n\n\n2021-01-01 00:00:00\n-1.0\n-0.306778\n-0.34891\n-0.04915\n-0.0559\n30.0\n\n\n2021-01-01 00:00:00\n-5.0\n-0.306778\n-0.34159\n-0.04915\n-0.054727\n30.0\n\n\n2021-01-01 00:00:00\n-15.0\n-0.306778\n-0.31755\n-0.04915\n-0.050876\n30.0\n\n\n2021-01-01 01:00:00\n-1.0\n-0.266633\n-0.303251\n-0.056529\n-0.064292\n30.0\n\n\n2021-01-01 01:00:00\n-5.0\n-0.266633\n-0.296889\n-0.056529\n-0.062944\n30.0\n\n\n…\n…\n…\n…\n…\n…\n…\n\n\n2021-01-02 00:00:00\n-5.0\n-0.31052\n-0.345756\n-0.039232\n-0.043684\n30.0\n\n\n2021-01-02 00:00:00\n-15.0\n-0.31052\n-0.321423\n-0.039232\n-0.04061\n30.0\n\n\n2021-01-02 01:00:00\n-1.0\n-0.313886\n-0.356994\n-0.055287\n-0.06288\n30.0\n\n\n2021-01-02 01:00:00\n-5.0\n-0.313886\n-0.349504\n-0.055287\n-0.061561\n30.0\n\n\n2021-01-02 01:00:00\n-15.0\n-0.313886\n-0.324907\n-0.055287\n-0.057229\n30.0\n\n\n\n\n\n\nLine chart.\n\nimport plotly.express as px\n\npx.line(df, x=\"time\", y=\"u\",color=\"depth\")\n\n        \n        \n        \n\n\n                            \n                                            \n\n\n\n\nCommand line\n\n!tidepredictor -x 0.0 -y 0.0 -s \"2021-01-01\" -e \"2021-01-01 02:00:00\" -i 30\n\n╭───────────────────── Traceback (most recent call last) ──────────────────────╮\n│ /home/runner/work/tidepredictor/tidepredictor/tidepredictor/main.py:78 in    │\n│ main                                                                         │\n│                                                                              │\n│    75 │   match type:                                                        │\n│    76 │   │   case PredictionType.level:                                     │\n│    77 │   │   │   predictor = LevelPredictor(constituent_repo=repo)          │\n│ ❱  78 │   │   │   df = predictor.predict(                                    │\n│    79 │   │   │   │   lon=lon,                                               │\n│    80 │   │   │   │   lat=lat,                                               │\n│    81 │   │   │   │   start=prediction_start,                                │\n│                                                                              │\n│ ╭───────────────────────────────── locals ─────────────────────────────────╮ │\n│ │            alpha = 0.14285714285714285                                   │ │\n│ │              end = datetime.datetime(2021, 1, 1, 2, 0)                   │ │\n│ │           format = &lt;Format.csv: 'csv'&gt;                                   │ │\n│ │         interval = 30                                                    │ │\n│ │              lat = 0.0                                                   │ │\n│ │              lon = 0.0                                                   │ │\n│ │           output = None                                                  │ │\n│ │             path = PosixPath('/home/runner/.local/share/tidepredictor/l… │ │\n│ │        precision = 3                                                     │ │\n│ │   prediction_end = datetime.datetime(2021, 1, 1, 2, 0)                   │ │\n│ │ prediction_start = datetime.datetime(2021, 1, 1, 0, 0)                   │ │\n│ │        predictor = &lt;tidepredictor.prediction.level.LevelPredictor object │ │\n│ │                    at 0x7fc70ceb0a50&gt;                                    │ │\n│ │             repo = &lt;tidepredictor.data.NetCDFConstituentRepository       │ │\n│ │                    object at 0x7fc70a32b490&gt;                             │ │\n│ │            start = datetime.datetime(2021, 1, 1, 0, 0)                   │ │\n│ │             type = &lt;PredictionType.level: 'level'&gt;                       │ │\n│ ╰──────────────────────────────────────────────────────────────────────────╯ │\n│                                                                              │\n│ /home/runner/work/tidepredictor/tidepredictor/tidepredictor/prediction/level │\n│ .py:73 in predict                                                            │\n│                                                                              │\n│    70 │   │   )                                                              │\n│    71 │   │   # TODO do we need this?                                        │\n│    72 │   │   t = pd.date_range(start=start, end=end, freq=interval)         │\n│ ❱  73 │   │   coef = self._coef(                                             │\n│    74 │   │   │   lon=lon,                                                   │\n│    75 │   │   │   lat=lat,                                                   │\n│    76 │   │   )                                                              │\n│                                                                              │\n│ ╭───────────────────────────────── locals ─────────────────────────────────╮ │\n│ │       df = shape: (5, 1)                                                 │ │\n│ │            ┌─────────────────────┐                                       │ │\n│ │            │ time                │                                       │ │\n│ │            │ ---                 │                                       │ │\n│ │            │ datetime[ns]        │                                       │ │\n│ │            ╞═════════════════════╡                                       │ │\n│ │            │ 2021-01-01 00:00:00 │                                       │ │\n│ │            │ 2021-01-01 00:30:00 │                                       │ │\n│ │            │ 2021-01-01 01:00:00 │                                       │ │\n│ │            │ 2021-01-01 01:30:00 │                                       │ │\n│ │            │ 2021-01-01 02:00:00 │                                       │ │\n│ │            └─────────────────────┘                                       │ │\n│ │      end = datetime.datetime(2021, 1, 1, 2, 0)                           │ │\n│ │ interval = datetime.timedelta(seconds=1800)                              │ │\n│ │      lat = 0.0                                                           │ │\n│ │      lon = 0.0                                                           │ │\n│ │     self = &lt;tidepredictor.prediction.level.LevelPredictor object at      │ │\n│ │            0x7fc70ceb0a50&gt;                                               │ │\n│ │    start = datetime.datetime(2021, 1, 1, 0, 0)                           │ │\n│ │        t = DatetimeIndex(['2021-01-01 00:00:00', '2021-01-01 00:30:00',  │ │\n│ │            │   │   │      '2021-01-01 01:00:00', '2021-01-01 01:30:00',  │ │\n│ │            │   │   │      '2021-01-01 02:00:00'],                        │ │\n│ │            │   │   │     dtype='datetime64[ns]', freq='30min')           │ │\n│ ╰──────────────────────────────────────────────────────────────────────────╯ │\n│                                                                              │\n│ /home/runner/work/tidepredictor/tidepredictor/tidepredictor/prediction/level │\n│ .py:87 in _coef                                                              │\n│                                                                              │\n│    84 │   def _coef(self, lon: float, lat: float) -&gt; Coef:                   │\n│    85 │   │   coef = Coef.template()                                         │\n│    86 │   │                                                                  │\n│ ❱  87 │   │   cons = self._constituent_repo.get_level_constituents(lon=lon,  │\n│    88 │   │   coef.A = np.array([v.amplitude for v in cons.values()])        │\n│    89 │   │   coef.g = np.array([v.phase for v in cons.values()])            │\n│    90 │   │   names = list(cons.keys())                                      │\n│                                                                              │\n│ ╭───────────────────────────────── locals ─────────────────────────────────╮ │\n│ │ coef = Coef(                                                             │ │\n│ │        │   name=[                                                        │ │\n│ │        │   │   'K1',                                                     │ │\n│ │        │   │   'K2',                                                     │ │\n│ │        │   │   'M2',                                                     │ │\n│ │        │   │   'M4',                                                     │ │\n│ │        │   │   'MF',                                                     │ │\n│ │        │   │   'MM',                                                     │ │\n│ │        │   │   'MN4',                                                    │ │\n│ │        │   │   'MS4',                                                    │ │\n│ │        │   │   'N2'                                                      │ │\n│ │        │   ],                                                            │ │\n│ │        │   mean=0.0,                                                     │ │\n│ │        │   umean=0.0,                                                    │ │\n│ │        │   vmean=0.0,                                                    │ │\n│ │        │   A=array([1.00227454, 0.02250278, 0.01775812, 0.01605451,      │ │\n│ │        0.01220086,                                                       │ │\n│ │        │      0.00751468, 0.00708371, 0.00577484, 0.00313313]),          │ │\n│ │        │   g=array([139.03197411, 144.78007052, 117.14151752,            │ │\n│ │        104.1430418 ,                                                     │ │\n│ │        │      216.82454621,   4.40876086, 240.44658427,  50.66603851,    │ │\n│ │        │      144.04531879]),                                            │ │\n│ │        │   Lsmaj=array([], dtype=float64),                               │ │\n│ │        │   Lsmin=array([], dtype=float64),                               │ │\n│ │        │   theta=array([], dtype=float64),                               │ │\n│ │        │   aux={                                                         │ │\n│ │        │   │   'reftime': 737429.1458333333,                             │ │\n│ │        │   │   'frq': array([0.0805114 , 0.04178075, 0.3220456 ,         │ │\n│ │        0.20280355, 0.1207671 ,                                           │ │\n│ │        │      0.28331495, 0.1610228 , 0.2415342 , 0.20844741]),          │ │\n│ │        │   │   'lind': array([ 47,  20, 124,  95,  68, 119,  81, 105,    │ │\n│ │        98]),                                                             │ │\n│ │        │   │   'lat': 42.0,                                              │ │\n│ │        │   │   'opt': {                                                  │ │\n│ │        │   │   │   'twodim': False,                                      │ │\n│ │        │   │   │   'nodiagn': True,                                      │ │\n│ │        │   │   │   'nodsatlint': 0,                                      │ │\n│ │        │   │   │   'nodsatnone': True,                                   │ │\n│ │        │   │   │   'gwchlint': False,                                    │ │\n│ │        │   │   │   'gwchnone': False,                                    │ │\n│ │        │   │   │   'notrend': True,                                      │ │\n│ │        │   │   │   'prefilt': array([], dtype=float64)                   │ │\n│ │        │   │   }                                                         │ │\n│ │        │   }                                                             │ │\n│ │        )                                                                 │ │\n│ │  lat = 0.0                                                               │ │\n│ │  lon = 0.0                                                               │ │\n│ │ self = &lt;tidepredictor.prediction.level.LevelPredictor object at          │ │\n│ │        0x7fc70ceb0a50&gt;                                                   │ │\n│ ╰──────────────────────────────────────────────────────────────────────────╯ │\n│                                                                              │\n│ /home/runner/work/tidepredictor/tidepredictor/tidepredictor/data.py:185 in   │\n│ get_level_constituents                                                       │\n│                                                                              │\n│   182 │   │   dict[str, LevelConstituent]                                    │\n│   183 │   │   │   The level constituents.                                    │\n│   184 │   │   \"\"\"                                                            │\n│ ❱ 185 │   │   return self._reader.get_level_constituents(lat=lat, lon=lon)   │\n│   186 │                                                                      │\n│   187 │   def get_current_constituents(                                      │\n│   188 │   │   self, lon: float, lat: float                                   │\n│                                                                              │\n│ ╭───────────────────────────────── locals ─────────────────────────────────╮ │\n│ │  lat = 0.0                                                               │ │\n│ │  lon = 0.0                                                               │ │\n│ │ self = &lt;tidepredictor.data.NetCDFConstituentRepository object at         │ │\n│ │        0x7fc70a32b490&gt;                                                   │ │\n│ ╰──────────────────────────────────────────────────────────────────────────╯ │\n│                                                                              │\n│ /home/runner/work/tidepredictor/tidepredictor/tidepredictor/data.py:64 in    │\n│ get_level_constituents                                                       │\n│                                                                              │\n│    61 │   │   │   The constituents.                                          │\n│    62 │   │   \"\"\"                                                            │\n│    63 │   │   with xr.open_dataset(self.file_path) as ds:                    │\n│ ❱  64 │   │   │   self._validate_data_domain(ds, lon, lat)                   │\n│    65 │   │   │                                                              │\n│    66 │   │   │   df = ds.sel(lon=lon, lat=lat, method=\"nearest\").to_datafra │\n│    67                                                                        │\n│                                                                              │\n│ ╭───────────────────────────────── locals ─────────────────────────────────╮ │\n│ │   ds = &lt;xarray.Dataset&gt; Size: 195kB                                      │ │\n│ │        Dimensions:     (lon: 60, lat: 30, cons: 13)                      │ │\n│ │        Coordinates:                                                      │ │\n│ │          * lon         (lon) float64 480B -3.467 -3.433 -3.4 ... -1.567  │ │\n│ │        -1.533 -1.5                                                       │ │\n│ │          * lat         (lat) float64 240B 55.5 55.53 55.57 55.6 ... 56.4 │ │\n│ │        56.43 56.47                                                       │ │\n│ │          * cons        (cons) &lt;U3 156B 'MM' 'MF' 'Q1' 'O1' ... 'K2'      │ │\n│ │        'MN4' 'M4' 'MS4'                                                  │ │\n│ │        Data variables:                                                   │ │\n│ │        │   amplitude   (cons, lat, lon) float32 94kB ...                 │ │\n│ │        │   phase       (cons, lat, lon) float32 94kB ...                 │ │\n│ │        │   bathymetry  (lon, lat) float32 7kB ...                        │ │\n│ │  lat = 0.0                                                               │ │\n│ │  lon = 0.0                                                               │ │\n│ │ self = &lt;tidepredictor.data.ConstituentReader object at 0x7fc70a32be10&gt;   │ │\n│ ╰──────────────────────────────────────────────────────────────────────────╯ │\n│                                                                              │\n│ /home/runner/work/tidepredictor/tidepredictor/tidepredictor/data.py:125 in   │\n│ _validate_data_domain                                                        │\n│                                                                              │\n│   122 │   │   Validates the data domain.                                     │\n│   123 │   │   \"\"\"                                                            │\n│   124 │   │   if lon &lt; ds.lon.min() or lon &gt; ds.lon.max():                   │\n│ ❱ 125 │   │   │   raise ValueError(f\"Longitude {lon} is outside the data dom │\n│   126 │   │   if lat &lt; ds.lat.min() or lat &gt; ds.lat.max():                   │\n│   127 │   │   │   raise ValueError(f\"Latitude {lat} is outside the data doma │\n│   128                                                                        │\n│                                                                              │\n│ ╭───────────────────────────────── locals ─────────────────────────────────╮ │\n│ │  ds = &lt;xarray.Dataset&gt; Size: 195kB                                       │ │\n│ │       Dimensions:     (lon: 60, lat: 30, cons: 13)                       │ │\n│ │       Coordinates:                                                       │ │\n│ │         * lon         (lon) float64 480B -3.467 -3.433 -3.4 ... -1.567   │ │\n│ │       -1.533 -1.5                                                        │ │\n│ │         * lat         (lat) float64 240B 55.5 55.53 55.57 55.6 ... 56.4  │ │\n│ │       56.43 56.47                                                        │ │\n│ │         * cons        (cons) &lt;U3 156B 'MM' 'MF' 'Q1' 'O1' ... 'K2' 'MN4' │ │\n│ │       'M4' 'MS4'                                                         │ │\n│ │       Data variables:                                                    │ │\n│ │       │   amplitude   (cons, lat, lon) float32 94kB ...                  │ │\n│ │       │   phase       (cons, lat, lon) float32 94kB ...                  │ │\n│ │       │   bathymetry  (lon, lat) float32 7kB ...                         │ │\n│ │ lat = 0.0                                                                │ │\n│ │ lon = 0.0                                                                │ │\n│ ╰──────────────────────────────────────────────────────────────────────────╯ │\n╰──────────────────────────────────────────────────────────────────────────────╯\nValueError: Longitude 0.0 is outside the data domain\n\n\nAll options are available as command line arguments.\n\n!tidepredictor --help\n\n                                                                                \n Usage: tidepredictor [OPTIONS]                                                 \n                                                                                \n Predict the tides for a given location.                                        \n                                                                                \n╭─ Options ────────────────────────────────────────────────────────────────────╮\n│ *  --lon                 -x      FLOAT RANGE           Longitude             │\n│                                  [-180&lt;=x&lt;=180]        [default: None]       │\n│                                                        [required]            │\n│ *  --lat                 -y      FLOAT RANGE           Latitude              │\n│                                  [-90&lt;=x&lt;=90]          [default: None]       │\n│                                                        [required]            │\n│    --start               -s      [%Y-%m-%d|%Y-%m-%dT%  Start date            │\n│                                  H:%M:%S|%Y-%m-%d      [default: None]       │\n│                                  %H:%M:%S]                                   │\n│    --end                 -e      [%Y-%m-%d|%Y-%m-%dT%  End date              │\n│                                  H:%M:%S|%Y-%m-%d      [default: None]       │\n│                                  %H:%M:%S]                                   │\n│    --interval            -i      INTEGER RANGE [x&gt;=1]  Interval in minutes   │\n│                                                        [default: 30]         │\n│    --output              -o      PATH                  Output file, default  │\n│                                                        is stdout             │\n│                                                        [default: None]       │\n│    --format                      [csv|json]            Output format         │\n│                                                        [default: csv]        │\n│    --type                        [level|current]       Type of prediction,   │\n│                                                        level or u,v          │\n│                                                        [default: level]      │\n│    --precision           -p      INTEGER RANGE [x&gt;=0]  Number of decimal     │\n│                                                        places. (csv only)    │\n│                                                        [default: 3]          │\n│    --alpha                       FLOAT                 Alpha factor for      │\n│                                                        current profile       │\n│                                                        [default:             │\n│                                                        0.14285714285714285]  │\n│    --install-completion                                Install completion    │\n│                                                        for the current       │\n│                                                        shell.                │\n│    --show-completion                                   Show completion for   │\n│                                                        the current shell, to │\n│                                                        copy it or customize  │\n│                                                        the installation.     │\n│    --help                                              Show this message and │\n│                                                        exit.                 │\n╰──────────────────────────────────────────────────────────────────────────────╯"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to tidepredictor",
    "section": "",
    "text": "Welcome to tidepredictor\n\nSee more in Getting started\nA complete reference is available here"
  },
  {
    "objectID": "api/index.html",
    "href": "api/index.html",
    "title": "API Reference",
    "section": "",
    "text": "LevelPredictor\nPredict tidal levels timeseries (surface elevation)\n\n\nCurrentPredictor\n\n\n\nNetCDFConstituentRepository\nA repository of tidal constituents stored in a NetCDF file.\n\n\nget_default_constituent_path\nGet the default path to the constituent file.\n\n\nPredictionType"
  },
  {
    "objectID": "api/index.html#tidepredictor",
    "href": "api/index.html#tidepredictor",
    "title": "API Reference",
    "section": "",
    "text": "LevelPredictor\nPredict tidal levels timeseries (surface elevation)\n\n\nCurrentPredictor\n\n\n\nNetCDFConstituentRepository\nA repository of tidal constituents stored in a NetCDF file.\n\n\nget_default_constituent_path\nGet the default path to the constituent file.\n\n\nPredictionType"
  },
  {
    "objectID": "api/PredictionType.html",
    "href": "api/PredictionType.html",
    "title": "PredictionType",
    "section": "",
    "text": "PredictionType\nPredictionType()"
  },
  {
    "objectID": "api/CurrentPredictor.html",
    "href": "api/CurrentPredictor.html",
    "title": "CurrentPredictor",
    "section": "",
    "text": "CurrentPredictor(self, constituent_repo, alpha=1.0 / 7)\n\n\n\n\n\nName\nDescription\n\n\n\n\npredict_depth_averaged\nPredict tide levels or currents using utide.\n\n\n\n\n\nCurrentPredictor.predict_depth_averaged(\n    lon,\n    lat,\n    start,\n    end,\n    interval=timedelta(hours=1),\n)\nPredict tide levels or currents using utide.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nlon\nfloat\nThe longitude.\nrequired\n\n\nlat\nfloat\nThe latitude.\nrequired\n\n\nstart\ndatetime\nThe start date.\nrequired\n\n\nend\ndatetime\nThe end date.\nrequired\n\n\ninterval\ntimedelta\nThe interval between predictions.\ntimedelta(hours=1)\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\npl.DataFrame\nThe predicted tide levels or currents.\n\n\n\n\n\n\nThe workhorse of this functions the reconstruct function from UTide"
  },
  {
    "objectID": "api/CurrentPredictor.html#methods",
    "href": "api/CurrentPredictor.html#methods",
    "title": "CurrentPredictor",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\npredict_depth_averaged\nPredict tide levels or currents using utide.\n\n\n\n\n\nCurrentPredictor.predict_depth_averaged(\n    lon,\n    lat,\n    start,\n    end,\n    interval=timedelta(hours=1),\n)\nPredict tide levels or currents using utide.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nlon\nfloat\nThe longitude.\nrequired\n\n\nlat\nfloat\nThe latitude.\nrequired\n\n\nstart\ndatetime\nThe start date.\nrequired\n\n\nend\ndatetime\nThe end date.\nrequired\n\n\ninterval\ntimedelta\nThe interval between predictions.\ntimedelta(hours=1)\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\npl.DataFrame\nThe predicted tide levels or currents.\n\n\n\n\n\n\nThe workhorse of this functions the reconstruct function from UTide"
  }
]